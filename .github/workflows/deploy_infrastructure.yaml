name: Deploy infrastructure
on:
  workflow_dispatch:
    inputs:
#      logLevel:
#        description: 'Log level'
#        required: true
#        default: 'warning'
#        type: choice
#        options:
#        - info
#        - warning
#        - debug
#      print_tags:
#        description: 'True to print to STDOUT'
#        required: true
#        type: boolean
      cloud:
        description: 'Cloud to deploy against'
        type: choice
        required: true
        default: "AWS"
        options:
        - AWS
        - Azure
      account:
        description: 'Account where deploy'
        type: choice
        required: true
        default: "ASM"
        options:
        - ASM
        - ACD

jobs:

  deploy-caldera-server:
#    runs-on: self-hosted
    runs-on: ubuntu-20.04
#    if:  ${{ inputs.print_tags }}
    env:
      TF_DATA_DIR: ${{ github.WORKSPACE }}/AWS_infra
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      server-ip: ${{ steps.caldera-outputs.outputs.ip }}
    steps:
    - name: Check out the code
      uses: actions/checkout@v3
    - name: Install python 3
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    - name: Install AWS cli
      if: inputs.cloud == 'AWS'
      run: |
        python -m pip install --upgrade pip
        pip install awscli==1.25.26
#    - name: Install AWS cli
#      uses: aws-actions/setup-sam@v2
#      with:
#        version: 1.53.0
#    - name: Install terraform
#      uses: hashicorp/setup-terraform@v2
#      with:
#        terraform_version: 1.2.4
    - name: Install Terraform
      if: inputs.cloud == 'Azure'
      env:
            TERRAFORM_VERSION: "1.2.4"
      run: |
        sudo apt update
        sudo apt install -y zip
        tf_version=$TERRAFORM_VERSION
        wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
        unzip terraform_"$tf_version"_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
    - name: Verify Terraform version
      run: |
        terraform --version
    - name: Terraform workspace
      run: |
        terraform workspace new ${{ inputs.environment }} || terraform workspace select ${{ inputs.environment }}
    - name: Terraform init
      run: |
        cd ${{ env.TF_DATA_DIR }}
        terraform init -input=false
    - name: Terraform validation
      run: |
        cd ${{ env.TF_DATA_DIR }}
        terraform validate
    - name: Terraform plan
      run: |
        cd ${{ env.TF_DATA_DIR }}
        terraform plan -target=aws_instance.caldera_server  -out=deploy.tfplan
    - name: Terraform apply
      run: |
        cd ${{ env.TF_DATA_DIR }}
        terraform apply deploy.tfplan
    - name: Commit report
      run: |
        git config --global user.name ${{ github.actor }}
        git pull
        git add -f AWS_infra/terraform.tfs* || true
        git commit -m "Autometed push terraform tfstate from ${{ github.github_event_name }}" || true
        git push
    - name: Export vars IP
      id: caldera-outputs
      run: |
        cd ${{ env.TF_DATA_DIR }}
        export IP=$(terraform output -raw caldera_server_ip)
        echo "::set-output name=ip::$IP"
  wait-caldera-ssh:
    runs-on: ubuntu-20.04
    needs: deploy-caldera-server
    steps:
    - name: Install netcat
      run: |
        sudo apt update
        sudo apt install netcat -y
    - name: Wait for ssh
      run: |
        export SERVER_IP=${{ needs.deploy-caldera-server.outputs.server-ip }}
        echo server $SERVER_IP
        while ! nc -z $SERVER_IP 22 &>/dev/null; do echo "Waiting ssh connection - `date`" && sleep 1; done
  ansible-install-caldera:
    runs-on: ubuntu-20.04
    needs: [deploy-caldera-server, wait-caldera-ssh]
    env:
      ANSIBLE_DATA_DIR: ${{ github.WORKSPACE }}/Ansible
      ANSIBLE_HOST: ${{ github.WORKSPACE }}/hosts
      CALDERA_KEY: ${{ github.WORKSPACE }}/sha
    steps:
    - name: Check out the code
      uses: actions/checkout@v3
    - name: Ensure pull the code
      run: |
        git pull
    - name: Install Ansible and JQ
      run: |
        sudo apt update
        sudo apt install -y ansible jq
    - name: Generate enviroment files
      run: |
        export SERVER_IP=${{ needs.deploy-caldera-server.outputs.server-ip }}
        echo ubuntu@$SERVER_IP > ${{ env.ANSIBLE_HOST }}
        cat ${{ github.WORKSPACE }}/AWS_infra/terraform.tfstate.d/${{ inputs.environment }}/terraform.tfstate | jq -r .outputs.rsa_private_key.value > ${{ env.CALDERA_KEY }}
        chmod 600 ${{ env.CALDERA_KEY }}
    - name: Caldera server trust on runner
      run: |
        mkdir -p ~/.ssh
        ssh-keygen -p -N "" -f ${{ env.CALDERA_KEY }}
        cp ${{ env.CALDERA_KEY }} ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keygen -y -f ${{ env.CALDERA_KEY }} > ~/.ssh/id_rsa.pub
        chmod 644 ~/.ssh/id_rsa.pub
    - name: Install Mitre Caldera
      run: |
        cd ${{ env.ANSIBLE_DATA_DIR }}
        ls -lah ${{ env.CALDERA_KEY }}
        cat ${{ env.CALDERA_KEY }}
        export ANSIBLE_HOST_KEY_CHECKING=false
        ansible-playbook -i ${{ env.ANSIBLE_HOST }} install-caldera-server.yml
  wait-caldera-server:
    runs-on: ubuntu-20.04
    needs: [deploy-caldera-server,ansible-install-caldera]
    steps:
    - name: Wait for service
      run: |
        export SERVER_IP=${{ needs.deploy-caldera-server.outputs.server-ip }}
        echo $SERVER_IP
        while ! curl -H "KEY:redAPIKeySantander22" http://$SERVER_IP:2288/api/v2/agents &>/dev/null; do echo "Curl Fail - `date`" && sleep 1; done
  deploy-caldera-hosts:
    runs-on: ubuntu-20.04
    needs: wait-caldera-server
    env:
      TF_DATA_DIR: ${{ github.WORKSPACE }}/AWS_infra
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      linux-ip: ${{ steps.host-vars.outputs.linux-ip }}
      windows-ip: ${{ steps.host-vars.outputs.windows-ip }}
    steps:
    - name: Check out the code
      uses: actions/checkout@v3
    - name: Ensure pull the code
      run: |
        git pull
    - name: Install python 3
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    - name: Install AWS cli
      run: |
        python -m pip install --upgrade pip
        pip install awscli==1.25.26
    - name: Install Terraform
      env:
            TERRAFORM_VERSION: "1.2.4"
      run: |
        sudo apt update
        sudo apt install zip -y
        tf_version=$TERRAFORM_VERSION
        wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
        unzip terraform_"$tf_version"_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
    - name: Verify Terraform version
      run: |
        terraform --version
    - name: Terraform workspace
      run: |
        terraform workspace new ${{ inputs.environment }} || terraform workspace select ${{ inputs.environment }}
    - name: Terraform init
      run: |
        cd ${{ env.TF_DATA_DIR }}
        terraform init -input=false
    - name: Terraform validation
      run: |
        cd ${{ env.TF_DATA_DIR }}
        terraform validate
    - name: Terraform plan
      run: |
        cd ${{ env.TF_DATA_DIR }}
        terraform plan -out=deploy.tfplan
    - name: Terraform apply
      run: |
        cd ${{ env.TF_DATA_DIR }}
        terraform apply deploy.tfplan
    - name: Commit report
      run: |
        git config --global user.name ${{ github.actor }}
        git pull
        git add -f AWS_infra/terraform.tfs* || true
        git commit -m "Autometed push terraform tfstate from ${{ github.GITHUB_EVENT_NAME }}" || true
        git push
    - name: Export vars IPs
      id: host-vars
      run: |
        cd ${{ env.TF_DATA_DIR }}
        export LIP=$(terraform output -raw linux_host_ip)
        echo "::set-output name=linux-ip::$LIP"
        export WIP=$(terraform output -raw windows_host_ip)
        echo "::set-output name=windows-ip::$WIP"
  wait-hosts-ssh:
    runs-on: ubuntu-20.04
    needs: [deploy-caldera-server, deploy-caldera-hosts]
    env:
      GITHUB_DIR_FILES: ${{ github.WORKSPACE }}/.github/files
      ANSIBLE_DATA_DIR: ${{ github.WORKSPACE }}/Ansible
      ANSIBLE_HOST: ${{ github.WORKSPACE }}/hosts
      CALDERA_KEY: ${{ github.WORKSPACE }}/sha
    steps:
    - name: Check out the code
      uses: actions/checkout@v3
    - name: Ensure pull the code
      run: |
        git pull
    - name: Install Ansible and JQ
      run: |
        sudo apt update
        sudo apt install -y ansible jq
    - name: Generate enviroment files
      run: |
        echo ubuntu@${{ needs.deploy-caldera-server.outputs.server-ip }} > ${{ env.ANSIBLE_HOST }}
        cat ${{ github.WORKSPACE }}/AWS_infra/terraform.tfstate.d/${{ inputs.environment }}/terraform.tfstate | jq -r .outputs.rsa_private_key.value > ${{ env.CALDERA_KEY }}
        chmod 600 ${{ env.CALDERA_KEY }}
    - name: Install netcat on caldera server
      run: |
        export ANSIBLE_HOST_KEY_CHECKING=false
        ansible all -i ${{ env.ANSIBLE_HOST }} --private-key ${{ env.CALDERA_KEY }} -b -m ansible.builtin.package  -a "name=netcat state=present"
        #sudo apt install netcat -y
    - name: Wait for linux host respond
      run: |
        ssh -o StrictHostKeychecking=no -i ${{ env.CALDERA_KEY }} ubuntu@${{ needs.deploy-caldera-server.outputs.server-ip }} nc -z ${{ needs.deploy-caldera-hosts.outputs.linux-ip }} 22
        while ! ssh -i ${{ env.CALDERA_KEY }} ubuntu@${{ needs.deploy-caldera-server.outputs.server-ip }} nc -z ${{ needs.deploy-caldera-hosts.outputs.linux-ip }} 22 &>/dev/null; do echo "Waiting ssh connection - `date`" && sleep 1; done
#  ansible-install-hosts:
#    runs-on: ubuntu-20.04
#    needs: [deploy-caldera-server, deploy-caldera-hosts, wait-hosts-ssh]
#    env:
#      ORG_HOST_FILE: ${{ github.WORKSPACE }}/.github/files/agent-hosts
#      ANSIBLE_DATA_DIR: ${{ github.WORKSPACE }}/Ansible
#      ANSIBLE_HOST: ${{ github.WORKSPACE }}/hosts
#      CALDERA_KEY: ${{ github.WORKSPACE }}/sha
#    steps:
#    - name: Check out the code
#      uses: actions/checkout@v3
#    - name: Ensure pull the code
#      run: |
#        git pull
#    - name: Install Ansible, jq and sed
#      run: |
#        sudo apt update
#        sudo apt install -y ansible jq sed
#    - name: Generate enviroment files
#      run: |
#        cat ${{ env.ORG_HOST_FILE }} | sed s+LINUX-IP+${{ needs.deploy-caldera-hosts.outputs.linux-ip }}+g | sed s+CALDERA-IP+${{ needs.deploy-caldera-server.outputs.server-ip }}+g > ${{ env.ANSIBLE_HOST }}
#        cat ${{ env.ANSIBLE_HOST }}
#        cat ${{ github.WORKSPACE }}/AWS_infra/terraform.tfstate.d/${{ inputs.environment }}/terraform.tfstate | jq -r .outputs.rsa_private_key.value > ${{ env.CALDERA_KEY }}
#        chmod 600 ${{ env.CALDERA_KEY }}
#        echo La key de las narices
#        cat ${{ env.CALDERA_KEY }}
#    - name: Caldera server trust on runner
#      run: |
#        mkdir -p ~/.ssh
#        ssh-keygen -p -N "" -f ${{ env.CALDERA_KEY }}
#        cp ${{ env.CALDERA_KEY }} ~/.ssh/id_rsa
#        chmod 600 ~/.ssh/id_rsa
#        ssh-keygen -y -f ${{ env.CALDERA_KEY }} > ~/.ssh/id_rsa.pub
#        chmod 644 ~/.ssh/id_rsa.pub
#    - name: Install Caldera hosts
#      run: |
#        echo la rsa
#        cat  ~/.ssh/id_rsa
#        echo la rsa pub
#        cat  ~/.ssh/id_rsa.pub
#
#        cd ${{ env.ANSIBLE_DATA_DIR }}
#        cat ${{ env.CALDERA_KEY }}
#        export ANSIBLE_HOST_KEY_CHECKING=false
#        ansible-playbook -i ${{ env.ANSIBLE_HOST }} --private-key ${{ env.CALDERA_KEY }} install-linux-caldera-agent.yml
#    - name: Deploy Linux host
#      run: |
#        ssh -i ${{ env.CALDERA_KEY }} ${{ needs.deploy-caldera-server.outputs.server-ip }} ping -c 1 ${{ needs.deploy-caldera-hosts.outputs.linux-ip }}
#        ssh ${{ needs.deploy-caldera-server.outputs.server-ip }} ip a
#        ssh ${{ needs.deploy-caldera-server.outputs.server-ip }} ping -c 1 ${{ needs.deploy-caldera-hosts.outputs.linux-ip }}
#
#        cd ${{ env.ANSIBLE_DATA_DIR }}
#        export ANSIBLE_HOST_KEY_CHECKING=false
#        ansible-playbook -i ${{ env.ANSIBLE_HOST }} --private-key ${{ env.CALDERA_KEY }} install-linux-caldera-agent.yml