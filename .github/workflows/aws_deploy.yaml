name: AWS deploy
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      print_tags:
        description: 'True to print to STDOUT'
        required: true
        type: boolean
      environment:
        description: 'Environment to run against'
        type: choice
        required: true
        default: "dev"
        options:
        - dev
        - pro

jobs:
  deploy-caldera-server:
    runs-on: self-hosted
#    runs-on: ubuntu-20.04
#    if:  ${{ inputs.print_tags }}
    env:
      TF_DATA_DIR: ${{ github.WORKSPACE }}/AWS_infra
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      output1: ${{ steps.caldera-ip.outputs.ip }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v3
      - name: Install python 3
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"
      - name: Install AWS cli
        uses: aws-actions/setup-sam@v2
        with:
          version: 1.53.0
#      - name: Install terraform
#        uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_version: 1.2.4
      - name: Install Terraform
        env:
              TERRAFORM_VERSION: "1.2.4"
        run: |
          sudo apt update
          sudo apt install zip -y
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
      - name: Verify Terraform version
        run: |
          terraform --version
      - name: Terraform workspace
        run: |
          terraform workspace new ${{ inputs.environment }}
          terraform workspace select ${{ inputs.environment }}
      - name: Terraform init
        run: |
          cd ${{ env.TF_DATA_DIR }}
          terraform init -input=false
      - name: Terraform validation
        run: |
          cd ${{ env.TF_DATA_DIR }}
          terraform validate
      - name: Terraform plan
        run: |
          cd ${{ env.TF_DATA_DIR }}
          terraform plan -target=aws_instance.caldera_server  -out=deploy.tfplan
      - name: Terraform apply
        run: |
          cd ${{ env.TF_DATA_DIR }}
          terraform apply deploy.tfplan
          ls -lart
      - name: Commit report
        run: |
          git config --global user.name 'shefirot'
          git config --global user.email 'davidgpozo@gmail.com'
          git add -f AWS_infra/terraform.tfs*
          git commit -am "Autometed push terraform tfstate"
          git push
      - name: Export caldera IP
        id: caldera-ip
        env:
          TF_OUT: ${{ env.TF_DATA_DIR }}/terraform.tfstate.d/${{ inputs.environment }}
        run: |
          cd ${{ env.TF_OUT }}
          IP=$(terraform output -raw caldera_server_ip)
          echo "::set-output name=ip::$IP"
  wait-caldera-up:
    runs-on: self-hosted
    needs: deploy-caldera-server
    steps:
    - name: Wait for service
      run: |
        echo ${{needs.deploy-caldera-server.outputs.ip}}

#  job2:
#    runs-on: ubuntu-latest
#    needs: job1
#    steps:
#      - run: echo ${{needs.job1.outputs.output1}} ${{needs.job1.outputs.output2}}
#  wait-caldera-up-and-ready:
#    runs-on: self-hosted
#    needs: deploy-caldera-server
#      steps:
#      - name: Wait for service
#        run: |
#          echo ${{needs.deploy-caldera-server.outputs.ip}}
