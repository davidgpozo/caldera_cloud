name: AWS deploy
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      print_tags:
        description: 'True to print to STDOUT'
        required: true
        type: boolean
      environment:
        description: 'Environment to run against'
        type: choice
        required: true
        default: "dev"
        options:
        - dev
        - pro

jobs:

  deploy-caldera-server:
#    runs-on: self-hosted
    runs-on: ubuntu-20.04
#    if:  ${{ inputs.print_tags }}
    env:
      TF_DATA_DIR: ${{ github.WORKSPACE }}/AWS_infra
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      server-ip: ${{ steps.caldera-outputs.outputs.ip }}
      server-sha: ${{ steps.caldera-outputs.outputs.sha }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v3
      - name: Install python 3
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"
      - name: Install AWS cli
        run: |
          python -m pip install --upgrade pip
          pip install awscli==1.25.26
#      - name: Install AWS cli
#        uses: aws-actions/setup-sam@v2
#        with:
#          version: 1.53.0
#      - name: Install terraform
#        uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_version: 1.2.4
      - name: Install Terraform
        env:
              TERRAFORM_VERSION: "1.2.4"
        run: |
          sudo apt update
          sudo apt install zip -y
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
      - name: Verify Terraform version
        run: |
          terraform --version
      - name: Terraform workspace
        run: |
          terraform workspace new ${{ inputs.environment }} || terraform workspace select ${{ inputs.environment }}
      - name: Terraform init
        run: |
          cd ${{ env.TF_DATA_DIR }}
          terraform init -input=false
      - name: Terraform validation
        run: |
          cd ${{ env.TF_DATA_DIR }}
          terraform validate
      - name: Terraform plan
        run: |
          cd ${{ env.TF_DATA_DIR }}
          terraform plan -target=aws_instance.caldera_server  -out=deploy.tfplan
      - name: Terraform apply
        run: |
          cd ${{ env.TF_DATA_DIR }}
          terraform apply deploy.tfplan
      - name: Commit report
        run: |
          git config --global user.name ${{ github.actor }}
          git pull
          git add -f AWS_infra/terraform.tfs* || true
          git commit -m "Autometed push terraform tfstate" || true
          git push
      - name: Export vars IP
        id: caldera-outputs
        run: |
          cd ${{ env.TF_DATA_DIR }}
          IP=$(terraform output -raw caldera_server_ip)
          SHA=$(terraform output --raw rsa_private_key)
          echo $IP
          echo "::set-output name=ip::$IP"
          echo "::set-output name=sha::$SHA"

  wait-caldera-ssh:
    runs-on: ubuntu-20.04
    needs: deploy-caldera-server
    steps:
    - name: Install netcat
      run: |
        sudo apt update
        sudo apt install netcat -y
    - name: Wait for ssh
      run: |
        export SERVER_IP=${{ needs.deploy-caldera-server.outputs.server-ip }}
        echo server $SERVER_IP
        while ! nc -z $SERVER_IP 22 &>/dev/null; do echo "Waiting ssh connection - `date`" && sleep 1; done

  ansible-install-caldera:
    runs-on: ubuntu-20.04
    needs: [deploy-caldera-server, wait-caldera-ssh]
    env:
      ANSIBLE_DATA_DIR: ${{ github.WORKSPACE }}/Ansible
      ANSIBLE_HOST: ${{ github.WORKSPACE }}/hosts
      CALDERA_KEY: ${{ github.WORKSPACE }}/sha
    steps:
    - name: Check out the code
      uses: actions/checkout@v3
    - name: Install Ansible
      run: |
        sudo apt update
        sudo apt install ansible -y
    - name: Generate enviroment files
      run: |
        export SERVER_IP=${{ needs.deploy-caldera-server.outputs.server-ip }}
        echo server $SERVER_IP
        echo ubuntu@$SERVER_IP > ${{ env.ANSIBLE_HOST }}
        export SERVER_SHA=${{ needs.deploy-caldera-server.outputs.server-sha }}
        echo "-----BEGIN RSA PRIVATE KEY-----" > ${{ env.CALDERA_KEY }}
        echo $SERVER_SHA | sed 's/-----BEGIN RSA PRIVATE KEY----- //g' | sed 's/ -----END RSA PRIVATE KEY-----//g' | sed 's/ /\n/g' >> ${{ env.CALDERA_KEY }}
        echo "-----END RSA PRIVATE KEY-----"  >> ${{ env.CALDERA_KEY }}
    - name: Deploy Mitre Caldera
      run: |
        cd ${{ env.ANSIBLE_DATA_DIR }}
        export ANSIBLE_HOST_KEY_CHECKING=false
        ansible-playbook -i ${{ env.ANSIBLE_HOST }} --private-key ${{ env.CALDERA_KEY }} install-caldera-server.yml

  wait-caldera-server:
    runs-on: ubuntu-20.04
    needs: [deploy-caldera-server,ansible-install-caldera]
    steps:
    - name: Wait for service
      run: |
        export SERVER_IP=${{ needs.deploy-caldera-server.outputs.server-ip }}
        echo $SERVER_IP
        while ! curl -H "KEY:redAPIKeySantander22" http://$SERVER_IP:2288/api/v2/agents &>/dev/null; do echo "Curl Fail - `date`" && sleep 1; done

  deploy-caldera-hosts:
    runs-on: ubuntu-20.04
    needs: wait-caldera-server
    env:
      TF_DATA_DIR: ${{ github.WORKSPACE }}/AWS_infra
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Check out the code
        run: |
          git pull
      - name: Install python 3
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"
      - name: Install AWS cli
        run: |
          python -m pip install --upgrade pip
          pip install awscli==1.25.26
#      - name: Install AWS cli
#        uses: aws-actions/setup-sam@v2
#        with:
#          version: 1.53.0
#      - name: Install terraform
#        uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_version: 1.2.4
      - name: Install Terraform
        env:
              TERRAFORM_VERSION: "1.2.4"
        run: |
          sudo apt update
          sudo apt install zip -y
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
      - name: Verify Terraform version
        run: |
          terraform --version
      - name: Terraform workspace
        run: |
          terraform workspace new ${{ inputs.environment }} || terraform workspace select ${{ inputs.environment }}
      - name: Terraform init
        run: |
          cd ${{ env.TF_DATA_DIR }}
          terraform init -input=false
      - name: Terraform validation
        run: |
          cd ${{ env.TF_DATA_DIR }}
          terraform validate
      - name: Terraform plan
        run: |
          cd ${{ env.TF_DATA_DIR }}
          terraform plan -out=deploy.tfplan
      - name: Terraform apply
        run: |
          cd ${{ env.TF_DATA_DIR }}
          terraform apply deploy.tfplan
      - name: Commit report
        run: |
          git add -f AWS_infra/terraform.tfs* || true
          git commit -m "Autometed push terraform tfstate" || true
          git push
